{"version":3,"sources":["translator.jsx"],"names":["ElementView","React","Component","format","props","prefix","split","name","map","element","index","array","length","backgroundColor","render","fontSize","borderBottom","overflow","ListView","constructor","renderElements","list","AddView","style","onClick","width","height","LanguageView","state","mode","updateList","onChange","e","value","target","dictionary","filter","word","indexOf","pos","sort","a","b","slice","setState","onAddMode","onCancel","onAdd","border","margin","position","bottom","bind","color","left","Main","setupView","root","ReactDOM"],"mappings":"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","file":"translator.js","sourcesContent":["class ElementView extends React.Component {\n    format() {\n        if (this.props.prefix !== '') {\n            const split = this.props.name.split(this.props.prefix);\n            return split.map((element, index, array) => {\n                return index>=array.length-1 ? element :\n                    [\n                        element,\n                        <span style={{\n                            backgroundColor: 'yellow',\n                        }}>\n                        {this.props.prefix}\n                        </span>\n                    ]\n            });\n        }\n        return <span>{this.props.name}</span>;\n    }\n\n    render() {\n        return <div\n            className=\"text\"\n            style={{\n                fontSize: 18,\n                borderBottom: \"1px gray solid\",\n//                maxHeight: 36,\n                overflow: 'hidden',\n            }}>\n            { this.format() }\n        </div>;\n    }\n}\n\nclass ListView extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderElements() {\n        return this.props.list.map(element => {\n            return <ElementView prefix={this.props.prefix} name={element}/>\n        });\n    }\n\n    render() {\n        return <div>{this.renderElements()}</div>;\n    }\n}\n\nclass AddView extends React.Component {\n    render() {\n        return <div style={this.props.style}>\n            <button onClick={this.props.onClick} style={{\n                fontSize: 20,\n                width: \"100%\",\n                backgroundColor: 'silver',\n                height: '100%',\n            }}>Add</button>\n        </div>;\n    }\n}\n\nclass LanguageView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: null,\n            list: this.updateList(''),\n        };\n    }\n\n    onChange(e) {\n        const value = e.target.value;\n        this.updateList(value);\n    }\n\n    updateList(prefix) {\n        let list = this.props.dictionary.filter(word => {\n            return word.indexOf(prefix)>=0;\n        });\n        list = list.map(word => {\n            return {\n                word: word,\n                pos: word ? word.indexOf(prefix) : -1,\n            };\n        });\n        list.sort((a,b) => {\n            return a.pos - b.pos;\n        });\n        list = list.slice(0, 10);\n        list = list.map(element => element.word);\n        this.setState({\n            prefix,\n            list,\n        });\n        return list;\n    }\n\n    onAddMode() {\n        this.setState({\n            mode: 'add',\n        });\n    }\n\n    onCancel() {\n        this.setState({\n            mode: null,\n        });\n    }\n\n    onAdd() {\n        this.setState({\n            mode: null,\n        });\n    }\n\n    render() {\n        return <div>{this.state.mode === 'add' ?\n            <div>\n                <div>Add a new entry</div>\n                <textarea style={{\n                    width: '100%',\n                    border: '1px solid black',\n                    height: 48,\n                    margin: -1,\n                }}></textarea>\n                <button style={{\n                    fontSize: 20,\n                    width: \"50%\",\n                    backgroundColor: '#ada',\n                    position: 'fixed',\n                    bottom: 0,\n                    height: 60,\n                }} onClick={this.onAdd.bind(this)}>OK</button>\n                <button style={{\n                    fontSize: 20,\n                    color: '#faa',\n                    left: '50%',\n                    width: \"50%\",\n                    backgroundColor: '#a00',\n                    position: 'fixed',\n                    bottom: 0,\n                    height: 60,\n                }} onClick={this.onCancel.bind(this)}>Cancel</button>\n            </div>\n            : <div>\n                <input style={{\n                    border: '1px solid black',\n                    margin: -1,\n                    width: '100vw',\n                    height: 24,\n                    fontSize: 24,\n                }} onChange={this.onChange.bind(this)}/>\n                <ListView prefix={this.state.prefix} list={this.state.list}/>\n                <AddView style={{\n                    position: 'fixed',\n                    width: '100%',\n                    bottom: 0,\n                    height: 60,\n                }} onClick={this.onAddMode.bind(this)} />\n            </div>\n        }\n        </div>;\n    }\n}\n\n\nclass Main {\n    static setupView(root, dictionary) {\n        ReactDOM.render(<LanguageView dictionary={dictionary} />, root);\n    }\n}\n\n"]}